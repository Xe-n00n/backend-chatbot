"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = require("dotenv");
const api_1 = require("../api");
dotenv.config();
const lastMileAIApi = new api_1.LastMile({ apiKey: (_a = process.env.LASTMILEAI_API_KEY) !== null && _a !== void 0 ? _a : "" });
describe("Trials API Methods", () => {
    test("createTrial", () => __awaiter(void 0, void 0, void 0, function* () {
        const name = "Test Trial Node API";
        const modelId = "cldf8cet50004qss7ieqt3amo"; // stable diffusion
        const trial = yield lastMileAIApi.createTrial({
            name,
            modelId,
        });
        const model = yield lastMileAIApi.readModel(modelId);
        expect(model.id).toEqual(modelId);
        expect(trial.id).not.toBeNull();
        expect(trial.name).toEqual(name);
        expect(trial.playgroundModelId).toEqual(modelId);
        expect(trial.createdAt).not.toBeNull();
        expect(trial.updatedAt).not.toBeNull();
    }));
});
