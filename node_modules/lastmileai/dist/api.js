"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LastMile = exports.TrialState = exports.TrialType = exports.DatasetType = exports.Visibility = exports.UserRole = void 0;
const axios_1 = require("axios");
const packageJson = require("./package.json");
var UserRole;
(function (UserRole) {
    UserRole["ADMIN"] = "ADMIN";
    UserRole["MEMBER"] = "MEMBER";
})(UserRole = exports.UserRole || (exports.UserRole = {}));
var Visibility;
(function (Visibility) {
    // Only visible to creator
    Visibility["PRIVATE"] = "PRIVATE";
    // Only visible to creator and recursive members of entity and parent entities.
    // For example, if you create trial T in experiment E in workspace W,
    // T will be visible to members explicitly specified for T, plus
    // members with access to E, plus
    // members with access to W.
    Visibility["MEMBER"] = "MEMBER";
    // Visible to everyone
    Visibility["PUBLIC"] = "PUBLIC";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
/**
 * DATASET TYPES
 */
var DatasetType;
(function (DatasetType) {
    // A website link or links that can be accessed without any authentication
    DatasetType["PUBLIC_URL"] = "PUBLIC_URL";
    // A file or set of files
    DatasetType["FILES"] = "FILES";
})(DatasetType = exports.DatasetType || (exports.DatasetType = {}));
/**
 * TRIAL TYPES
 */
var TrialType;
(function (TrialType) {
    TrialType["INFERENCE"] = "INFERENCE";
    TrialType["FINE_TUNE"] = "FINE_TUNE";
})(TrialType = exports.TrialType || (exports.TrialType = {}));
/**
 * State of a trial -- once a trial is closed, its model is available for consumption
 */
var TrialState;
(function (TrialState) {
    TrialState["OPEN"] = "OPEN";
    TrialState["CLOSED"] = "CLOSED";
})(TrialState = exports.TrialState || (exports.TrialState = {}));
/**
 * API Class
 */
/**
 * LastMile - API for interfacing with LastMileAI
 * @export
 * @class LastMile
 */
class LastMile {
    constructor(configuration) {
        this.configuration = configuration;
        if (!this.configuration.defaultAxiosConfig) {
            this.configuration.defaultAxiosConfig = {
                baseURL: 'https://lastmileai.dev/api/',
                headers: {
                    'User-Agent': `LastMileAI/NodeJS/${packageJson.version}`,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${this.configuration.apiKey}`,
                }
            };
        }
    }
    /**
     * HELPERS
     */
    /**
     *
     * @summary Returns status of API layer
     */
    apiHealth() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            // Only need the 'User-Agent' header from the default config
            let headers;
            if ((_a = this.configuration.defaultAxiosConfig) === null || _a === void 0 ? void 0 : _a.headers) {
                headers = {
                    "User-Agent": (_b = this.configuration.defaultAxiosConfig) === null || _b === void 0 ? void 0 : _b.headers["User-Agent"],
                };
            }
            const res = yield axios_1.default.get("health", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { headers }));
            return res.data;
        });
    }
    /**
     * DATASETS
     */
    /**
     *
     * @summary Creates and returns a new Dataset
     * @param {DatasetCreateData} data Data to set in the created Dataset
     */
    createDataset(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("datasets/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Dataset
     * @param {string} id The id of the Dataset to delete
     */
    deleteDataset(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("datasets/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Datasets. Supports pagination and filtering by search string
     * @param {DatasetListQueryData} [queryData] Query / pagination filters
     */
    listDatasets(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("datasets/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads a Dataset
     * @param {string} id The id of the Dataset to read
     */
    readDataset(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("datasets/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with a Dataset
     * @param {string} id The id of the Dataset to update
     * @param {DatasetUpdateData} data Data to update for the Dataset
     */
    updateDataset(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("datasets/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * EMBEDDINGS
     */
    /**
     *
     * @summary Creates and returns a new EmbeddingCollection
     * @param {EmbeddingCollectionCreateData} data Data to set in the created EmbeddingCollection
     */
    createEmbeddingCollection(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("embeddings/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified EmbeddingCollection
     * @param {string} id The id of the EmbeddingCollection to delete
     */
    deleteEmbeddingCollection(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("embeddings/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of EmbeddingCollections. Supports pagination and filtering by search string
     * @param {EmbeddingCollectionListQueryData} [queryData] Query / pagination filters
     */
    listEmbeddingCollections(queryData) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("embeddings/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                    ready: (_b = queryData === null || queryData === void 0 ? void 0 : queryData.ready) === null || _b === void 0 ? void 0 : _b.toString(),
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads an EmbeddingCollection
     * @param {string} id The id of the EmbeddingCollection to read
     */
    readEmbeddingCollection(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("embeddings/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns the status of an EmbeddingCollection
     * @param {string} id The id of the EmbeddingCollection to obtain status of
     */
    embeddingCollectionStatus(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("embeddings/status", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with an EmbeddingCollection
     * @param {string} id The id of the EmbeddingCollection to update
     * @param {EmbeddingCollectionUpdateData} data Data to update for the EmbeddingCollection
     */
    updateEmbeddingCollection(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("embeddings/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * EXPERIMENTS
     */
    /**
     *
     * @summary Creates and returns a new Experiment
     * @param {EmbeddingCollectionCreateData} data Data to set in the created Experiment
     */
    createExperiment(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("experiments/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Experiment
     * @param {string} id The id of the Experiment to delete
     */
    deleteExperiment(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("experiments/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Experiments. Supports pagination and filtering by search string
     * @param {ExperimentListQueryData} [queryData] Query / pagination filters
     */
    listExperiments(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("experiments/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                    workspaceId: queryData === null || queryData === void 0 ? void 0 : queryData.workspaceId,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads an Experiment
     * @param {string} id The id of the Experiment to read
     */
    readExperiment(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("emperiments/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with an Experiment
     * @param {string} id The id of the Experiment to update
     * @param {ExperimentUpdateData} data Data to update for the Experiment
     */
    updateExperiment(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("experiments/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * INFERENCE
     */
    /**
     *
     * @summary Provides text chat completion using OpenAI models
     * @param {OpenAIChatCompletionData} data Data to use for the chat completion request
     */
    createOpenAIChatCompletion(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("inference/openai/chatgpt/completion", data, this.configuration.defaultAxiosConfig);
            return res.data.completionResponse;
        });
    }
    /**
     *
     * @summary Provides text completion using OpenAI models
     * @param {OpenAICreateCompletionRequest} data Data to use for the completion request
     */
    createOpenAICompletion(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("inference/openai/completion", data, this.configuration.defaultAxiosConfig);
            return res.data.completionResponse;
        });
    }
    /**
     * MODELS
     */
    /**
     *
     * @summary Creates and returns a new Model
     * @param {ModelCreateData} data Data to set in the created Model
     */
    createModel(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("models/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Model
     * @param {string} id The id of the Model to delete
     */
    deleteModel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("models/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Models. Supports pagination and filtering by search string
     * @param {ModelListQueryData} [queryData] Query / pagination filters
     */
    listModels(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("models/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                    promoted: queryData === null || queryData === void 0 ? void 0 : queryData.promoted,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads a Model
     * @param {string} id The id of the Model to read
     */
    readModel(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("models/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with a Model
     * @param {string} id The id of the Model to update
     * @param {ModelUpdateData} data Data to update for the Model
     */
    updateModel(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("models/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * NOTIFICATIONS
     */
    /**
     *
     * @summary Returns a list of Notifications. Supports pagination and filtering by search string
     * @param {ModelListQueryData} [queryData] Query / pagination filters
     */
    listNotifications(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("notifications/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update either a specific notification, or all notifications, to mark as read
     * @param {string} [id] Optional id of the Notification to mark as read
     * @param {boolean} [all] Optional flag to mark all Notificaitons as read. Takes precedence over id
     */
    updateNotificationRead(id, all) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("notifications/updateread", { id, all }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * ORGANIZATIONS
     */
    /**
     *
     * @summary Creates and returns a new Organization
     * @param {OrganizationCreateData} data Data to set in the created Organization
     */
    createOrganization(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Organization
     * @param {string} id The id of the Organization to delete
     */
    deleteOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("orgs/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Organizations. Supports pagination and filtering by search string
     * @param {OrganizationListQueryData} [queryData] Query / pagination filters
     */
    listOrganizations(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("orgs/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads an Organization
     * @param {string} id The id of the Organization to read
     */
    readOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("orgs/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with an Organization
     * @param {string} id The id of the Organization to update
     * @param {OrganizationUpdateData} data Data to update for the Organization
     */
    updateOrganization(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("orgs/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * ORGANIZATION MEMBERS
     */
    /**
     *
     * @summary Accept the invite to an Organization
     * @param {string} id The id of the Organization to accept the invite for
     */
    acceptOrganizationInvite(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/members/acceptinvite", { id }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Add a member to an Organization
     * @param {string} id The id of the Organization to add the member to
     * @param {string} email The email of the member to add to the organization
     */
    addOrganizationMember(id, email) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/members/add", { id, email }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Change the role of a member within the organization
     * @param {string} id The id of the Organization
     * @param {string} memberId The id of the organization member whose role will be updated
     * @param {UserRole} role The new UserRole for the organization member
     */
    changeOrganizationMemberRole(id, memberId, role) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/members/changerole", { id, memberId, role }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Reject the invite to an Organization
     * @param {string} id The id of the Organization to reject the invite for
     */
    rejectOrganizationInvite(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/members/rejectInvite", { id }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Remove a member to an Organization
     * @param {string} id The id of the Organization to remove the member from
     * @param {string} email The email of the member to remove from the organization
     */
    removeOrganizationMember(id, email) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("orgs/members/remove", { id, email }, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * REVIEWS
     */
    /**
     *
     * @summary Returns a list of Reviews. Supports pagination and filtering by search string
     * @param {ReviewListQueryData} [queryData] Query / pagination filters
     */
    listReviews(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("reviews/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads a Review
     * @param {string} id The id of the Review to read
     */
    readReview(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("reviews/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     * PRIVATE TOKENS
     */
    /**
     *
     * @summary Creates and returns a new private Token
     * @param {TokenCreateData} data Data to set in the created Token
     */
    createToken(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("tokens/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified private Token
     * @param {string} id The id of the Token to delete
     */
    deleteToken(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("tokens/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of private Tokens. Supports pagination
     * @param {TokenListQueryData} [queryData] Query / pagination filters
     */
    listTokens(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("tokens/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                } }));
            return res.data;
        });
    }
    /**
     * PUBLIC TOKENS
     */
    /**
     *
     * @summary Creates and returns a new Public Token
     * @param {TokenCreateData} data Data to set in the created Token
     */
    createPublicToken(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("tokens/public/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Public Token
     * @param {string} id The id of the Token to delete
     */
    deletePublicToken(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("tokens/public/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Public Tokens. Supports pagination
     * @param {PublicTokenListQueryData} [queryData] Query / pagination filters
     */
    listPublicTokens(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("tokens/public/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                } }));
            return res.data;
        });
    }
    /**
     * TRIALS
     */
    /**
     *
     * @summary Creates and clone of a Trial
     * @param {TrialCloneData} data Data to describe the clone
     */
    cloneTrial(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("trials/clone", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Creates and returns a new Trial
     * @param {TrialCreateData} data Data to set in the created Trial
     */
    createTrial(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("trials/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Trial
     * @param {string} id The id of the Trial to delete
     */
    deleteTrial(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("trials/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Creates a fork (by ref) of a Trial
     * @param {TrialForkData} data Data to describe the fork
     */
    forkTrial(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("trials/fork", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Trials. Supports pagination and filtering by search string
     * @param {TrialListQueryData} [queryData] Query / pagination filters
     */
    listTrials(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("trials/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads a Trial
     * @param {string} id The id of the Trial to read
     */
    readTrial(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("trials/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with a Trial
     * @param {string} id The id of the Trial to update
     * @param {TrialUpdateData} data Data to update for the Trial
     */
    updateTrial(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("trials/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * TRIAL STEPS
     */
    /**
     *
     * @summary Creates and returns a new TrialStep
     * @param {TrialStepCreateData} data Data to set in the created TrialStep
     */
    createTrialStep(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("trialsteps/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with a TrialStep
     * @param {string} id The id of the TrialStep to update
     * @param {TrialStepUpdateData} data Data to update for the TrialStep
     */
    updateTrialStep(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("trialsteps/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     * UPLOADS
     */
    /**
     *
     * @summary Attaches an Upload to an entity
     * @param {string} id The id of the Upload to attach
     * @param {UploadAttachData} data Specifies the entity to attach the Upload to
     */
    attachUpload(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("upload/attach", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Creates and returns a new Upload
     * @param {UploadCreateData} data Data to set in the created Upload
     */
    createUpload(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("upload/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Returns an upload policy to client to upload to S3. Part of upload flow.
     */
    uploadPolicy() {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("upload/policy", Object.assign({}, this.configuration.defaultAxiosConfig));
            return res.data;
        });
    }
    /**
     * WORKSPACES
     */
    /**
     *
     * @summary Creates and returns a new Workspace
     * @param {WorkspaceCreateData} data Data to set in the created Workspace
     */
    createWorkspace(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.post("workspaces/create", data, this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
    /**
     *
     * @summary Deletes a specified Workspace
     * @param {string} id The id of the Workspace to delete
     */
    deleteWorkspace(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.delete("workspaces/delete", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { data: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Returns a list of Workspaces. Supports pagination and filtering by search string
     * @param {WorkspaceListQueryData} [queryData] Query / pagination filters
     */
    listWorkspaces(queryData) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("workspaces/list", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: {
                    cursor: queryData === null || queryData === void 0 ? void 0 : queryData.cursor,
                    pageSize: (_a = queryData === null || queryData === void 0 ? void 0 : queryData.pageSize) === null || _a === void 0 ? void 0 : _a.toString(),
                    search: queryData === null || queryData === void 0 ? void 0 : queryData.search,
                } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Reads a Workspace
     * @param {string} id The id of the Workspace to read
     */
    readWorkspace(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.get("workspaces/read", Object.assign(Object.assign({}, this.configuration.defaultAxiosConfig), { params: { id } }));
            return res.data;
        });
    }
    /**
     *
     * @summary Update the data associated with a Workspace
     * @param {string} id The id of the Workspace to update
     * @param {WorkspaceUpdateData} data Data to update for the Workspace
     */
    updateWorkspace(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield axios_1.default.put("workspaces/update", Object.assign(Object.assign({}, data), { id }), this.configuration.defaultAxiosConfig);
            return res.data;
        });
    }
}
exports.LastMile = LastMile;
